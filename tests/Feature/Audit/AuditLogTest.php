<?php

namespace Tests\Feature\Audit;

use App\Models\UserDetails;
use BFG\Audit\Models\AuditJobs;
use Database\Seeders\UserDetailsTestSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class AuditLogTest extends TestCase
{

    use RefreshDatabase;

    /**
     * Set up the testing and seed to create user details
     * @return void
     */

    public function setUp(): void
    {

        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed(UserDetailsTestSeeder::class);

    }

    /**
     * Test to return all records that match the given parameters.
     *
     * @return void
     */
    public function test_audit_log_all_parameters_positive()
    {

        $auditJobs = AuditJobs::getAuditLogs('App\Models\UserDetails', 3, 'id', 'DESC', 5, "['action', '=', 'Create']");

     // One record has been returned which matches all parameters passed in.
        $this->assertCount(1, $auditJobs);

    }

    /**
     * Test to check that more records than expected are not returned.
     *
     * @return void
     */
    public function test_audit_log_all_parameters_negative()
    {

        $auditJobs = AuditJobs::getAuditLogs('App\Models\UserDetails', 4, 'id', 'DESC', 5, "['action', '=', 'Create']");

     // When 1 record should be returned, determines that 2 records aren't returned.
        $this->assertNotCount(2, $auditJobs);

    }

    /**
     * Test to return all records with a model_id of 1.
     *
     * @return void
     */
    public function test_audit_log_returns_multiple_records_positive()
    {

        $userDetails = UserDetails::find(3)->first();
        $userDetails->update(['last_name' => 'Test Smith']);

        $auditJobs = AuditJobs::getAuditLogs('App\Models\UserDetails', 1, 'id', 'DESC', 5);

     // When a record has been updated, 2 records are returned (the created record, and the inserted record).
        $this->assertCount(2, $auditJobs);

    }

    /**
     * Test to check that more records than expected are not returned with a model_id of 1.
     *
     * @return void
     */
    public function test_audit_log_returns_multiple_records_negative()
    {

        $userDetails = UserDetails::find(5)->first();
        $userDetails->update(['last_name' => 'Test Update Logan']);

        $auditJobs = AuditJobs::getAuditLogs('App\Models\UserDetails', 4, 'id', 'DESC', 5);

     // When a record has been updated once, check that 3 records are not returned.
        $this->assertNotCount(3, $auditJobs);

    }

    /**
     * Test that the total number of records returned are equal to the given pagination number.
     *
     * @return void
     */
    public function test_audit_log_pagination()
    {

        $userDetails = UserDetails::find(1)->first();
        $userDetails->update(['first_name' => 'Test Bob']);

        $auditJobs = AuditJobs::getAuditLogs('App\Models\UserDetails', 1, 'id', 'DESC', 1);

    //  When there are 2 records, only 1 is returned when the paginate parameter is 1.
        $this->assertCount(1, $auditJobs);

    //  When there are 2 records, 2 pages are returned when the paginate parameter is 1.
        $this->assertEquals(2, ceil($auditJobs->total() / $auditJobs->perPage()));

    }

    /**
     * Test that the returned results are ordered by column 'id' and returned in descending order.
     *
     * @return void
     */
    public function test_audit_log_order_by_desc()
    {
        $userDetails = UserDetails::find(1)->first();
        $userDetails->update(['favourite_colour' => 'Test Mauve']);

        $auditJobs = AuditJobs::getAuditLogs('App\Models\UserDetails', 1, 'id', 'DESC', 15);

     // When there are 2 records, record with id 11 is displayed first, and record with id 1 is displayed last.
        $this->assertEquals(11, $auditJobs[0]->id);
        $this->assertEquals(1, $auditJobs[1]->id);

    }

    /**
     * Test that the returned result is considering passed in filter parameter.
     *
     * @return void
     */
    public function test_audit_log_filters_positive()
    {

        $auditJobs = AuditJobs::getAuditLogs('App\Models\UserDetails', 3, 'id', 'DESC', 5, "['action', '=', 'Create']");

     // Test that the record returned is checking that the filter parameter 'action' matches value 'Create'.
        $this->assertEquals('Create', $auditJobs[0]->action);

    }

    /**
     * Test that the returned result is not returning incorrect filter value.
     *
     * @return void
     */
    public function test_audit_log_filters_negative()
    {

        $auditJobs = AuditJobs::getAuditLogs('App\Models\UserDetails', 6, 'id', 'DESC', 10, "['action', '=', 'Create']");

     // Test that the record returned is checking that the filter parameter 'action' does not match value 'Update'.
        $this->assertNotEquals('Update', $auditJobs[0]->action);

    }

    /**
     * Test that the returned result is considering multiple passed in filter parameters.
     *
     * @return void
     */
    public function test_audit_log_filters_multiple()
    {

        $auditJobs = AuditJobs::getAuditLogs('App\Models\UserDetails', 3, 'id', 'DESC', 5, "['action', '=', 'Create'], ['user_id', '=', 0]");

     // Test that the record returned is checking that the filter parameter 'user_id' matches value '0'.
        $this->assertEquals(0, $auditJobs[0]->user_id);

     // Test that the record returned is checking that the filter parameter 'action' matches value 'Create'.
        $this->assertEquals('Create', $auditJobs[0]->action);

    }

}
